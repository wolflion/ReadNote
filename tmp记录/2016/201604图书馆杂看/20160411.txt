9.1 
类只是一种抽象类型，并不是一个实体，不占存储空间，无处容纳数据。
如果类里全是公有成员，可以跟结构体变量的初始化类似，在定义对象时对数据成员进行初始化。`TIME t1={9,12,55}`


构造函数：在建立对象时自动执行。
功能：是由用户定义的，用户根据初始化的要求设计函数体和函数参数。
注意：没有返回值；也不需要定义构造函数时声明类型；不需用户调用，也不能被用户调用；如果没有自定义的，系统会自动生成一个构造函数，只是函数体是空的，也没有参数，不执行初始化操作。

带参数的构造函数 TIME(int,int,int);【通过赋值语句对数据成员实现初始化】

//形参h的值初始化数据成员hour。
**参数初始化表**，在函数首部实现  TIME::TIME(int h,int m,int s):hour(h),minute(m),second(s){}

在一个类中可以定义多个构造函数，以便类对象提供不同的初始化方法。
构造函数的重载 【参数个数和类型不同】

无参的构造函数 属于 默认构造函数；{一个类只能有一个默认构造函数}

使用默认参数的构造函数



9.2 析构函数
程序调用析构函数的情况：

9.3 调用构造函数和析构函数的顺序



9.4 


9.6 共用数据的保护
共用数据：实参与形参，变量与其引用，数据及其指针。
**常对象**中的数据成员为常变量且必须要有初值，`TIME const t1(12,34,46);`等价于`const TIME t1(12,34,46);`数据成员的值都不能被修改。

常成员函数可以访问常对象中的数据成员，但仍然不允许修改常对象中数据成员的值。

`mutable int count;`//将count声明为可变的数据成员


9.5 对象的动态建立和释放



9.8 对象的赋值和复制

9.9 静态成员
+ 静态数据成员
	静态数据成员，它就为各对象所共有，而不只属于某个对象的成员，所有对象都可以引用它。{在内存中只占一份；在为对象所分配的空间中不包括静态数据成员分配空间}
	静态数据成员，是在所有对象之外单独开辟空间。只要在类中定义了静态数据成员，即使不定义对象，也为静态数据成员分配空间，它可以被引用。
	静态数据成员，是在程序编译时被分配空间的，到程序结束时才释放空间。
+ 静态成员函数



//准备放到ClassStep02
9.10 友元

9.11 类模板








